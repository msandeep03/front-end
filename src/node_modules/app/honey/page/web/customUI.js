import { Button, ButtonBase, Typography, Tabs, Tab, InputBase, IconButton, Grid, Avatar } from '@material-ui/core';
import styled from 'styled-components';
import React, { Component } from 'react'
import {rem} from 'polished'

const map = {
  sm: 600,
  md: 960,
  lg: 1280,
  xl: 1920,
}

const $browserContext = 16;

const mediaGrid = (type) => () => `@media (max-width: ${map[type] - 1}px)`
const ButtonBuy = styled(Button)`
  && {
    background-color: rgba(255, 255, 255, 0.05);
    color: #000;
    box-shadow: 1px 1px 0px  black inset, -1px -1px 0px  black inset;
    font-size: ${rem(18)};
    font-weight: 600;
    text-transform: uppercase;
    //min-width: ${rem(150)};
    //margin: 1.312em;
    line-height: 1.321;
    &:hover {
      color: white;
    }
   }
`;

//style Buttons
const ButtonPrimary = styled(({ width, ...other }) => (
  <Button {...other} />
))`
  && {
    background-color: #000;
    color: white;
    font-weight: 600;
    font-size: ${rem(20)};
    text-transform: uppercase;
    width: ${props => props.width} || inherit;
    padding-top: ${rem(10)};
    padding-bottom: ${rem(10)};
   }
`;

const ButtonHeader = styled(Button)`
  && {
    background-color: rgba(255, 255, 255, 0.05);
    color: #fff;
    box-shadow: 1px 1px 0px  white inset, -1px -1px 0px  white inset;
    font-size: ${rem(20)};
    font-weight: 600;
    text-transform: uppercase;
    min-width: ${rem(150)};
    margin: 1.312em;
    line-height: 1.321;
    &:hover {
      color: black;
    }
   }
`;

const TypographyItalic = styled(({ size, align, margin, bold, color, ...other }) => (
  <Typography {...other} />
))`
&& {
  color: ${props => props.color || '#fff'};
  font-size: ${props => props.size};
  text-align: ${props => props.align || 'left'};
  line-height: 1.4;
  font-weight: ${props => props.bold || 'normal'};
  font-style: italic;
  margin: ${props => props.margin || '0'};
  padding: ${props => props.padding || '0'};

  a {
    text-decoration: underline;
    color: ${props => props.color || '#fff'};
    font-weight: ${props => props.bold || 'normal'};
    &:hover {
      text-decoration: none;
    }
  }

}
`;

const Input = styled(({ width, align, ...other }) => (
  <InputBase {...other} />
))`
&& {
  margin: none;
  border: none;
  box-shadow: 1px 1px 0px #b1b1b1 inset, -1px -1px 0px #b1b1b1 inset;
  font-size: 1.125rem;
  width: ${props => props.width || 'auto'};
  input {
    color: #000;
    text-align: ${props => props.align || 'left'};
    padding: 0.935rem;
  }
}
`;



const GridCustom = styled(({ background, margin, ...other }) => (
  <Grid {...other} />
))`
&& {
  background: ${props => props.background};
  margin: ${props => props.margin};
  padding: ${props => props.padding};
}
`;

const TagLine = styled(({ color, transform, border, margin, fweight, ...other }) => (
  <Typography {...other} />
))`
&& {
  font-size: ${props => props.size || '1rem'};
  font-weight: ${props => props.fweight || 400};
  color: ${props => props.color};
  margin: ${props => props.margin};
  text-align: center;
  font-style: normal;
  line-height: normal; 
}
`;



const Title = styled(({ color, transform, border, margin, fweight, ...other }) => (
  <Typography {...other} />
))`&& {
  color: ${props => props.color};
  border-bottom: ${props => props.border};
  text-transform: ${props => props.transform || 'inherit'};
  border-color: ${props => props.color};
  margin: ${props => props.margin};
  font-weight: ${props => props.fweight || '700'};
  min-width: auto;
  width: 100%;
  font-size: ${props => props.size};
  text-align: center;
  &:hover {
    background: none;
  },

}
`;

const CenterDiv = styled.div`
&& {
  text-align: center;   
  display: flex;
  justifyContent: center;
  alignItems: flex-end;
 }
`; 

const SectionVideo = styled.div`
  width: 100vw;
  height: 630px;
  position: relative;

  .TagLine {
    ${mediaGrid(`xl`)}{//lg d
      font-size: 2.1rem;
    }
    ${mediaGrid(`lg`)}{//sm d
      font-size: ${rem(30)};
    }
    ${mediaGrid(`md`)}{//md tablet
      font-size: 1.5rem;
    }
    ${mediaGrid(`sm`)}{//sm phone
      font-size: 1.3rem;
    }
  }  
`;



const AvatarUI = styled(({ width, height, margin, ...other }) => (
  <Avatar {...other} />
))`&& {
  width: ${props => props.width || 'auto'};
  height: ${props => props.height || 'auto'};
  margin: ${props => props.margin || 'auto'};
}
`;

const BannerStretch = styled.div`
&& {
  position: relative;
  /*margin: 0 -100px;*/
  width: 100%;
  overflow: hidden;
}
`; 

const FooterBlock = styled.div`
&& {
  font-size: 1.14rem;
  font-weight: 300;
  .link {
    padding-bottom: 0.3125rem;
    a {
      color: #000;
      &:hover {
        text-decoration: underline;
      }
    }
    &.active {
      a {
        font-weight: bold;
      }
    }
  }
  .mdUp {
    margin: 0 0 2rem 0;
  }
  .title {
    display: block;
    padding-bottom: 0.2rem;
    font-size: 1.3rem;
    font-weight: 600;
    margin: 0;
  }
  
  input {
    font-size: 1.125rem;
    font-style: italic;
  }

  ${mediaGrid(`sm`)} { //phone
    .copyright {
      text-align: center;
      font-size: 85%;
    }
    .copyright, .link {
      margin-bottom: 0.6em;
    }
    
    .title, .link {
      text-align: center;
    }

   
  }
}
`;

export {
  FooterBlock,
  BannerStretch,
  AvatarUI,
  TypographyItalic,
  ButtonPrimary,
  CenterDiv, 
  SectionVideo, 
  ButtonHeader, 
  Input,
  Title,
  GridCustom,
  TagLine,
  rem,
  mediaGrid,
  ButtonBuy
};