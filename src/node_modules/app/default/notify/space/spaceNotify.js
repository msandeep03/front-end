import uuid                 from 'uuid/v4'


export default [
  `app.default`,
  `notify`,
  [],
  () => ({
    data: {},
    orderMap: {
      default: [],
    },
  }),
  {
    create: (getState, setState) => function* (doc, options = {}) {
      const { orderName = `default` } = options
      const { data, orderMap } = yield getState()

      const id = doc.id || uuid()

      const orderNext = data[id]
        ? orderMap[orderName] || []
        : [...orderMap[orderName], id]

      yield setState({
        data: {
          ...data,
          [id]: {
            ...(data[id] || {}),
            ...doc,
          },
        },
        orderMap: {
          ...orderMap,
          [orderName]: orderNext,
        }
      })
    },
    update: (getState, setState, { create }) => function* (doc, options = {}) {
      yield create(doc, options)
    },
    remove: (getState, setState) => function* ({ id }, options = {}) {
      const { orderName = `default` } = options
      const { data: prevData, orderMap } = yield getState()
      const { [id]: docRemoved, ...data } = prevData

      yield setState({
        data,
        orderMap: {
          ...orderMap,
          [orderName]: orderMap[orderName].filter((_id) => _id !== id)
        }
      })
    },
    orderMove: (getState, setState) => function* (id, to, from = `default`) {
      const { orderMap } = yield getState()

      const fromOrder = orderMap.default.filter((_id) => _id !== id)
      const toOrder = [
        ...(orderMap[to] || []),
        id,
      ]

      yield setState({
        orderMap: {
          ...orderMap,
          [from]: fromOrder,
          [to]: toOrder,
        }
      })
    },
  }
]