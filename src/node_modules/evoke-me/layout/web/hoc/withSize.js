//import throttle             from 'lodash.throttle'
import React, { Component } from 'react'
import { findDOMNode }      from 'react-dom'
import lifecycle            from 'recompose/lifecycle'


const EVENT = `resize`

const getSize = (container) => {
  const { width, height } = container.getBoundingClientRect()
  return {
    width,
    height,
  }
}

export default () => (WrappedComponent) => {
  const enhance = compose(
    withStateHandler(
      () => ({
        container: null,
        width: 0,
        height: 0,
      }),
      {
        containerSet: () => (container) => {
          const size = getSize(container)
          return {
            container,
            ...size,
          }
        },
        sizeSet: () => (width, height) => ({ width, height }),
      }
    ),
    withHandlers({
      onResize: ({ container, sizeSet }) => () => {
        sizeSet(getSize(container))
      },
    }),
    lifecycle({
      componentDidMount() {
        window.addEventListener(EVENT, this.props.onResize)
      },
      componentWillUnmount() {
        window.removeEventListener(EVENT, this.props.onResize)
      }
    })
  )

  return enhance(({
    container, containerSet,
    sizeSet,
    onResize,
    ...props
  }) => (
    <WrappedComponent
      ref={containerSet}
      container={container}
      {...props}
    />
  ))
}