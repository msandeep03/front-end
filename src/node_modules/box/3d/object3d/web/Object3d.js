import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'
import lifecycle            from 'recompose/lifecycle'

import * as THREE           from 'three'
import { OBJLoader }        from 'three-obj-mtl-loader'
import { MTLLoader }        from 'three-obj-mtl-loader'


import Context              from '../../scene/all/Context'


const enhance = compose(
  defaultProps({
    mtl: null,
    obj: null,
    position: new THREE.Vector3(0, 0, 0),
    rotation: new THREE.Vector3(0, 0, 0),
    scale: new THREE.Vector3(1, 1, 1),
  }),
  withStateHandlers(
    () => ({
      instance: null,
    }),
    {
      instanceSet: () => (instance) => ({ instance }),
    }
  ),
  withPropsOnChange(
    ['position'],
    ({ instance, position }) => instance && instance.position.copy(position)
  ),
  withPropsOnChange(
    ['rotation'],
    ({ instance, rotation }) => instance && instance.rotation.setFromVector3(rotation)
  ),
  withPropsOnChange(
    ['scale'],
    ({ instance, scale }) => instance && instance.scale.copy(scale)
  ),
  withPropsOnChange(
    ['imageLink'],
    ({ instance, imageLink }) => {
      if (!instance) return

      const texture = new THREE.TextureLoader().load(imageLink)
      texture.repeat.set(2, 2)
      texture.wrapS = texture.wrapT = THREE.RepeatWrapping
      texture.anisotropy = 16

      const color = new THREE.Color().setHSL(0.1, 0.3, 0.2 * 0.5 + 0.1)
      const material = new THREE.MeshLambertMaterial({
        map: texture,
        color,
        reflectivity: 0.5,
      })

      console.log(`CHANGE TEXTURE`)

      instance.children[0].material = material
    }
  ),  
  withHandlers({
    mount: ({
      fromScene,
      instanceSet,
      imageLink,
      mtl,
      obj,
      position,
      rotation,
      scale,
    }) => () => {
      const { scene } = fromScene

      let mtlLoader = new MTLLoader()
      let objLoader = new OBJLoader()

      if (mtl) {
        mtlLoader.load(mtl, (materials) => {
          materials.preload()
          objLoader.setMaterials(materials)        
          objLoader.load(obj, (instance) => {
            instance.position.copy(position)
            instance.rotation.copy(rotation)
            instance.scale.copy(scale)
            scene.add(instance)
          })        
        })
      } else {
        objLoader.load(obj, (instance) => {
          instance.position.copy(position)
          instance.rotation.setFromVector3(new THREE.Vector3(-Math.PI / 2, 0, 0))
          instance.scale.copy(scale)

          const texture = new THREE.TextureLoader().load(imageLink)
          texture.repeat.set(2, 2)
          texture.wrapS = texture.wrapT = THREE.RepeatWrapping
          texture.anisotropy = 16

          const color = new THREE.Color().setHSL(0.1, 0.3, 0.2 * 0.5 + 0.1)
          const material = new THREE.MeshLambertMaterial({
            map: texture,
            color,
            reflectivity: 0.5,
          })

          instance.children[0].material = material
          
          //new THREE.MeshStandardMaterial( { color: 0xff4400, metalness: 0.9, roughness: 0.2, name: 'orange' } ),
          

          //console.log(`MATERIAL`, instance.children[0])

          scene.add(instance)

          instanceSet(instance)
        })
      }
    },
    update: () => () => {
    },
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
  }),
)

const Object3d = enhance(() => null)

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Object3d {...props} fromScene={context} />
      )}
    </Context.Consumer>
  )
}