import React, { Component } from 'react'
import compose              from 'recompose/compose'
import lifecycle            from 'recompose/lifecycle'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'
import styled               from 'styled-components'

import * as THREE           from 'three'


import Context              from '../all/Context'


const Root = styled.div`
  width: 100%;
  height: 100%;
`

const getSize = (container) => {
  const { width, height } = container.getBoundingClientRect()
  return {
    width,
    height,
  }
}

const enhance = compose(
  withStateHandlers(
    () => ({
      animateCamera: null,
      animateList: [],
      canvas: null,
      container: null,
      renderer: null,
      scene: null,
      width: 0,
      height: 0,
    }),
    {
      animateAdd: ({ animateList }) => (callback) => ({
        animateList: [
          ...animateList,
          callback,
        ]
      }),
      animateCameraSet: () => (animateCamera) => ({ animateCamera }),
      canvasSet: () => (canvas) => ({ canvas }),
      containerSet: () => (container) => ({ container }),
      rendererSet: () => (renderer) => ({ renderer }),
      sceneSet: () => (scene) => ({ scene }),
      sizeSet: () => (width, height) => ({ width, height }),
    }
  ),
  withHandlers({
    animate: ({ animateCamera, animateList }) => () => {
      for (let callback of animateList) {
        callback()
      }

      if (animateCamera) {
        animateCamera()
      }
    },
    onMouseClick: ({ onMouseClick }) => (e) => {
      onMouseClick && onMouseClick(e)
    },
  }),
  withPropsOnChange(
    ['container'],
    ({
      canvasSet,
      container,
      rendererSet,
      sizeSet,
      sceneSet,
      onMouseClick,
    }) => {
      if (container) {
        const renderer = new THREE.WebGLRenderer({
          antialias: true,
          alpha: true,
        })
        const scene = new THREE.Scene()

        const { width, height } = getSize(container)

        renderer.setSize(width, height)
        renderer.setPixelRatio(window.devicePixelRatio);
        container.appendChild(renderer.domElement)

        container.oncontextmenu = e => e.preventDefault()
        container.addEventListener('click', onMouseClick, false)

        canvasSet(renderer.domElement)
        rendererSet(renderer)
        sceneSet(scene)
        sizeSet(width, height)
      }
    }
  ),    
  lifecycle({
    componentDidMount() {
      this.raf = null

      const animateRender = () => {
        this.props.animate()
        this.raf = requestAnimationFrame(animateRender)
      }

      animateRender()
    },
    componentWillUnmount()  {
      const { container, renderer, scene } = this.props

      if (container) {
        cancelAnimationFrame(this.raf)
        container.addEventListener('dblclick', null, false)
        container.removeEventListener('click', this.props.onMouseClick, false)

        while (scene.children.length > 0) { 
          scene.remove(scene.children[0])
        }

        const cleanMaterial = (material) => {
          material.dispose()
          for (const key of Object.keys(material)) {
            const value = material[key]
            if (value && typeof value === 'object' && 'minFilter' in value) {
              value.dispose()
            }
          }
        }
        
        scene.traverse((object) => {
          if (!object.isMesh) return
          object.geometry.dispose()
          if (object.material.isMaterial) {
            cleanMaterial(object.material)
          } else {
            for (const material of object.material) cleanMaterial(material)
          }
        })

        renderer.dispose()
      }
    }
  }),
)

const Scene = enhance(({
  animateAdd, animateList,
  animateCameraSet,
  canvas,
  children,
  container, containerSet,
  renderer,
  scene,
  width,
  height,
}) => {
  return (
    <Root ref={containerSet}>
      <Context.Provider value={{
        animateAdd, animateList,
        animateCameraSet,
        canvas,
        container,
        scene,
        renderer,
        width,
        height,
      }}>
        {scene ? children : null}
      </Context.Provider>
    </Root>
  )
})

export default Scene