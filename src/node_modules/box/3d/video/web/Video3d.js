import React, { Component } from 'react'
import compose              from 'recompose/compose'
import lifecycle            from 'recompose/lifecycle'
import withHandlers         from 'recompose/withHandlers'
import withStateHandlers    from 'recompose/withStateHandlers'

import * as THREE           from 'three'


import Context              from '../../scene/all/Context'


const enhance = compose(
  withStateHandlers(
    () => ({
      canvas: null,
      video: null,
      context2d: null,
      videoTexture: null,
    }),
    {
      canvasSet: () => (canvas) => ({ canvas }),
      videoSet: () => (video) => ({ video }),
      context2dSet: () => (context2d) => ({ context2d }),
      videoTextureSet: () => (videoTexture) => ({ videoTexture }),
    }
  ),
  withHandlers({
    animate: ({ video, context2d, videoTexture }) => () => {
      if (video.readyState === video.HAVE_ENOUGH_DATA) {
        context2d.drawImage(video, 0, 0)
        if (videoTexture) {
  		    videoTexture.needsUpdate = true
        }
      }
    }
  }),
  withHandlers(() => {
    let movieMaterial
    let movieGeometry
    let movieScreen

    return {
      mount: ({
        canvasSet,
        context2dSet,
        videoSet,
      }) => () => {
        const video = document.createElement('video')
        video.src = 'https://cdn.evokeme.io/static/latelierdumiel/launch.ogv'
        video.crossOrigin = ''
        video.load()
        video.play()

        const videoImage = document.createElement('canvas')
        videoImage.width = 1280
        videoImage.height = 544

        const videoImageContext = videoImage.getContext('2d')
        videoImageContext.fillStyle = '#ff0000'
        videoImageContext.fillRect(0, 0, videoImage.width, videoImage.height)

        videoSet(video)
        canvasSet(videoImage)
        context2dSet(videoImageContext)
      },
      update: ({
        animate,
        canvas,
        video,
        context2d,
        fromScene,
        videoTexture, videoTextureSet,
      }) => () => {
        const { animateAdd, scene } = fromScene

        if (context2d && video && canvas) {
          if (!videoTexture) {
            const videoTexture = new THREE.Texture(canvas)
            videoTexture.minFilter = THREE.LinearFilter
            videoTexture.magFilter = THREE.LinearFilter

            videoTextureSet(videoTexture)

            movieMaterial = new THREE.MeshBasicMaterial({ map: videoTexture, side: THREE.DoubleSide })
            movieGeometry = new THREE.PlaneGeometry(240, 100, 4, 4)
            movieScreen = new THREE.Mesh(movieGeometry, movieMaterial)
            movieScreen.position.set(0, 50, 0)
            scene.add(movieScreen)

            animateAdd(animate)
          }
        }

      }
    }
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
    componentDidUpdate() {
      this.props.update()
    },
  }),
)

const Video3d = enhance(({
  videoHandle,
}) => {
  return null
})



export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Video3d {...props} fromScene={context} />
      )}
    </Context.Consumer>
  )
}