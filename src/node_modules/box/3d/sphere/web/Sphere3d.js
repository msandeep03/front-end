import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'
import lifecycle            from 'recompose/lifecycle'

import * as THREE           from 'three'


import Context              from '../../scene/all/Context'


const enhance = compose(
  defaultProps({
    x: 0,
    y: 0,
    z: 0,
  }),
  withStateHandlers(
    () => ({
      instance: null,
    }),
    {
      instanceSet: () => (instance) => ({ instance }),
    }
  ),
  withPropsOnChange(
    ['x', 'y', 'z'],
    ({ instance, x, y, z }) => {
      if (instance) {
        instance.position.set(x, y, z)
      }
    }
  ),
  withHandlers({
    mount: ({ fromScene, instanceSet, x, y, z }) => () => {
      const { scene } = fromScene

      const geometry = new THREE.SphereGeometry(5, 32, 32)
      const material = new THREE.MeshLambertMaterial({ color: 0xdddddd })
      const sphere = new THREE.Mesh(geometry, material)

      sphere.position.set(x, y, z)

      scene.add(sphere)

      instanceSet(sphere)
    },
    update: () => () =>{
    },
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
  }),
)

const Sphere3d = enhance(() => null)

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Sphere3d {...props} fromScene={context} />
      )}
    </Context.Consumer>
  )
}