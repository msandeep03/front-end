import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'
import lifecycle            from 'recompose/lifecycle'

import * as THREE           from 'three'
import '../api/patchLineMaterial'
import '../api/patchLineGeometry'
import '../api/patchLine2'


import withScene            from '../../scene/all/withScene'
import hilbert3d            from '../api/hilbert3d'


const enhance = compose(
  withScene(),
  defaultProps({
    color: 0xffffff,
    path: [new THREE.Vector3(0, 0, 0)],
    position: new THREE.Vector3(0, 0, 0),
    lineWidth: 0.01,
  }),
  withStateHandlers(
    () => ({
      instance: null,
    }),
    {
      instanceSet: () => (instance) => ({ instance }),
    }
  ),
  withPropsOnChange(
    ['path'],
    ({ instance, path }) => {
      if (instance && path.length) {
        const positions = path.reduce((result, { x, y, z }) => {
          result.push(x, y, z + 0.1)
          return result
        }, [])
        const geometry = new THREE.LineGeometry()
        geometry.setPositions(positions)

        instance.geometry = geometry
        instance.computeLineDistances()
      }
    }
  ),  
  withPropsOnChange(
    ['color'],
    ({ instance, color }) => {
      if (instance) {
        instance.material.color.setHex(color)
      }
    }
  ),  
  withPropsOnChange(
    ['position'],
    ({ instance, position }) => {
      if (instance) {
        instance.position.copy(position)
      }
    }
  ),
  withPropsOnChange(
    ['width'],
    ({ instance, lineWidth }) => {
      if (instance) {
        instance.material.linewidth = lineWidth
      }
    }
  ),
  withHandlers({
    mount: ({
      color,
      fromScene,
      instanceSet,
      path,
      position,
      lineWidth,
    }) => () => {
      const { scene } = fromScene

      const positions = path.reduce((result, { x, y, z }) => {
        result.push(x, y, z + 0.1)
        return result
      }, [])
      const colors = []

      //const points = hilbert3d(new THREE.Vector3(0, 0, 0), 20.0, 1, 0, 1, 2, 3, 4, 5, 6, 7)

      // const spline = new THREE.CatmullRomCurve3(points)
      // const divisions = Math.round(12 * points.length)
      //const color = new THREE.Color()

      // for ( var i = 0, l = divisions; i < l; i ++ ) {
      //   var point = spline.getPoint(i / l);
      //   positions.push(point.x, point.y, point.z)
      //   //color.setHSL(i / l, 1.0, 0.5)
      //   //colors.push(color.r, color.g, color.b)
      // }

      var geometry = new THREE.LineGeometry()
      geometry.setPositions(positions)
      //geometry.setColors(colors)
      //geometry.setColors([1, 0, 1, 1, 0, 1])

      //console.log(colors)

      //const material = new THREE.LineDashedMaterial({ color: 0xffffff, dashSize: 1, gapSize: 0.5 })
      //const material = new THREE.LineBasicMaterial({ color: 0xffffff, vertexColors: THREE.VertexColors })
      const material = new THREE.LineMaterial({
        color,
        linewidth: lineWidth, // in pixels
        //vertexColors: THREE.VertexColors,
        //resolution:  // to be set by renderer, eventually
        dashed: false
      })
			
      const instance = new THREE.Line2(geometry, material)
      instance.computeLineDistances()
			instance.scale.set(1, 1, 1)

      scene.add(instance)
      instanceSet(instance)
    },
    update: () => () => {
    },
    unmount: ({ instance, fromScene }) => () => {
      fromScene.scene.remove(instance)
    }
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
    componentWillUnmount() {
      this.props.unmount()
    }
  }),
)

const Line3d = enhance(() => null)

export default Line3d