import * as PIXI            from 'pixi.js'
import * as PIXIP           from 'pixi-projection'

import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'
import lifecycle            from 'recompose/lifecycle'


import withLayer            from '../../layer/all/withLayer'
import withStage            from '../../stage/all/withStage'


const enhance = compose(
  withStage(),
  withLayer(),
  defaultProps({
    pathPerspective:[
      [85, 261],
      [294, 237],
      [298, 404],
      [82, 378],      
    ],
  }),
  withStateHandlers(
    () => ({
      instance: null,
    }),
    {
      instanceSet: () => (instance) => ({ instance }),
    }
  ),
  withPropsOnChange(
    ['x', 'y'],
    ({ instance, x, y, z }) => {
      if (instance) {
        instance.position.set(x, y)
      }
    }
  ),
  withHandlers({
    update: ({
      instance
    }) => (o = instance) => {
      if (o) {}
    },
  }),
  withHandlers({
    mount: ({
      fromLayer,
      fromStage,
      imageLink,
      instanceSet,
      pathPerspective,
      update,
      x, y,
    }) => async () => {
      const path = [
        [85, 261],
        [294, 237],
        [298, 404],
        [82, 378],
      ]

      const next = pathPerspective

      const { renderer, stage } = fromStage
      const { width } = renderer
      const instance = new PIXI.Container()
      const main = new PIXI.Container()

      instance.parentGroup = fromLayer.layer
      instance.addChild(main)
      stage.addChild(instance)

      const texture = await fromStage.textureLoad({ imageLink })
      const sprite = new PIXI.projection.TilingSprite2d(texture, 2000, 2000)
      sprite.anchor.set(0.5, 0.5)
      
      sprite.tileScale.x = 0.5
      sprite.tileScale.y = 0.5
      
      main.addChild(sprite)

      instance.filters = [new PIXI.filters.AlphaFilter()]

      const mask = new PIXI.Graphics()
      const foreground = new PIXI.Graphics()
      foreground.blendMode = 20

      instance.addChild(mask)
      instance.addChild(foreground)

      instance.mask = mask

      mask.clear()
      mask.beginFill(0xffffff)
      mask.moveTo(next[0][0], next[0][1])
      for (let index = 1; index < next.length; index++) {
        const [x, y] = next[index]
        mask.lineTo(x, y)
      }
      mask.endFill()

      foreground.clear()
      foreground.beginFill(0x000000);
      foreground.lineStyle(0);
      foreground.drawCircle(200, 1400, 100);
      foreground.endFill()

      const quad = [
        new PIXI.Point(next[0][0], next[0][1]),
        new PIXI.Point(next[1][0], next[1][1]),
        new PIXI.Point(next[2][0], next[2][1]),
        new PIXI.Point(next[3][0], next[3][1]),
      ]

      sprite.proj.mapSprite(sprite, quad)

      instanceSet(instance)
      update(instance)
    },
    unmount: ({
      fromStage,
      instance,
    }) => () => {
      const { stage } = fromStage
      if (stage && instance) {
        stage.removeChild(instance)
      }
    }
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
    componentDidUpdate() {
      //this.props.update()
    },
    componentWillUnmount() {
      this.props.unmount()
    },
  }),
)

const Plane2d = enhance(() => null)

export default Plane2d