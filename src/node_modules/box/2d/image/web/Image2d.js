import * as PIXI            from 'pixi.js'
import * as PIXIP           from 'pixi-projection'

import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'
import lifecycle            from 'recompose/lifecycle'


import withLayer            from '../../layer/all/withLayer'
import withStage            from '../../stage/all/withStage'


const enhance = compose(
  withStage(),
  withLayer(),
  defaultProps({
  }),
  withStateHandlers(
    () => ({
      instance: null,
    }),
    {
      instanceSet: () => (instance) => ({ instance }),
    }
  ),
  withPropsOnChange(
    ['x', 'y'],
    ({ instance, x, y, z }) => {
      if (instance) {
        instance.position.set(x, y)
      }
    }
  ),
  withHandlers({
    update: ({
      instance
    }) => (o = instance) => {
      if (o) {}
    },
  }),
  withHandlers({
    mount: ({
      fromLayer,
      fromStage,
      imageLink,
      instanceSet,
      isFit,
      update,
      x, y,
    }) => async () => {
      const { renderer, stage } = fromStage
      const { width } = renderer
      const instance = new PIXI.Container()

      const texture = await fromStage.textureLoad({ imageLink })
      const sprite = new PIXI.projection.Sprite2d(texture)

      if (isFit) {
        const scale = width / texture.orig.width
        sprite.scale.set(scale, scale)
      }

      instance.position.set(x, y)
      instance.addChild(sprite)

      instance.parentGroup = fromLayer.layer
      stage.addChild(instance)

      instanceSet(instance)
      update(instance)
    },
    unmount: ({
      fromStage,
      instance,
    }) => () => {
      const { stage } = fromStage
      if (stage && instance) {
        stage.removeChild(instance)
      }
    }
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
    componentDidUpdate() {
      //this.props.update()
    },
    componentWillUnmount() {
      this.props.unmount()
    },
  }),
)

const Image2d = enhance(() => null)

export default Image2d