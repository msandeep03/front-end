import * as PIXI            from 'pixi.js'
import * as PIXIL           from 'pixi-layers'

import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import lifecycle            from 'recompose/lifecycle'
import withHandlers         from 'recompose/withHandlers'
import withStateHandlers    from 'recompose/withStateHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import styled               from 'styled-components'


import ContextStage         from '../../stage/all/Context'
import Context              from '../all/Context'


const enhance = compose(
  defaultProps({
    name: `default`,
    index: 0,
  }),
  withPropsOnChange(
    ({ fromStage: { layers }}, { fromStage: { layers: layersNext }}) => layers != layersNext,
    ({ fromStage, name }) => {
      return {
        layer: fromStage.layers[name],
      }
    },    
  ),
  withHandlers(() => {
    return {
      mount: ({
        fromStage: {
          layerCreate,
        },
        name,
        index,
      }) => () => {
        layerCreate({ name, index })
      },
      unmount: ({
        fromStage: {
          layerRemove,
        },
      }) => () => {
        layerRemove({ name })
      },
      update: () => () => {

      },
    }
  }),
  lifecycle({
    componentDidMount() {
      this.props.mount()
    },
    componentWillUnmount()  {
      this.props.unmount()
    }
  }),
)

const Layer2d = enhance(({ children, name, layer }) => {
  return (
    <Context.Provider value={{ name, layer }}>
      {layer ? children : null}
    </Context.Provider>
  )
})

export default (props) => {
  return (
    <ContextStage.Consumer>
      {(context) => (
        <Layer2d {...props} fromStage={context} />
      )}
    </ContextStage.Consumer>
  )
}