import * as PIXI            from 'pixi.js'
import * as PIXIL           from 'pixi-layers'

import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import lifecycle            from 'recompose/lifecycle'
import withHandlers         from 'recompose/withHandlers'
import withStateHandlers    from 'recompose/withStateHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import styled               from 'styled-components'


import Context              from '../all/Context'

const enhance = compose(
  defaultProps({
    antialias: true,
    backgroundColor: 0xffffff,
    width: 2000,
    height: 2000,
    isShow: true,
  }),
  withStateHandlers(
    () => ({
      app: null,
      canvas: null,
      layers: {},      
      textures: {},
    }),
    {
      appSet: () => (app) => ({ app }),
      canvasSet: () => (canvas) => ({ canvas }),
      layerSet: ({ layers }) => ({ name, value }) => {
        return {
          layers: {
            ...layers,
            [name]: value,
          },
        }
      },
      layerUnset: ({ layers: prevLayers }) => ({ name }) => {
        const { [name]: layerRemove, ...layers } = prevLayers
        return { layers }
      },      
      textureSet: ({ textures }) => async ({ name, value }) => {
        return {
          textures: {
            ...textures,
            [name]: value,
          }
        }
      },
    }
  ),
  withPropsOnChange(
    ['canvas'],
    ({
      antialias,
      appSet,
      backgroundColor,
      canvas,
      width, height,
      onCanvasChange,
    }) => {
      if (canvas) {
        const app = new PIXI.Application(width, height, {
          antialias,
          backgroundColor,
          view: canvas,
        })

        app.stage = new PIXI.display.Stage()
        app.stage.group.enableSort = true

        app.renderer.render(app.stage)

        appSet(app)

        onCanvasChange && onCanvasChange(canvas)
      }
    }
  ),
  withHandlers(() => {
    return {
      mount: () => () => {

      },
      update: () => () => {

      },
      layerCreate: ({ app, layerSet }) => ({ name, index }) => {
        const group = new PIXI.display.Group(index, true)

        app.stage.addChild(new PIXI.display.Layer(group))

        layerSet({ name, value: group })
      },
      layerRemove: ({ app, layers, layerUnset }) => ({ name }) => {
        app.stage && app.stage.removeChild(layers[name])
        layerUnset({ name })
      },      
      textureLoad: ({ textures, textureSet }) => async ({ imageLink }) => {
        if (textures[imageLink]) return textures[imageLink]

        const texture = await new Promise((resolve, reject) => {
          if (PIXI.utils.TextureCache[imageLink]) return resolve(PIXI.utils.TextureCache[imageLink])

          const loader = new PIXI.loaders.Loader()

          loader
            .add(imageLink, imageLink)
            .load((loader, resources) => resolve(resources[imageLink].texture))
        })

        textureSet({ name: imageLink, value: texture })

        return texture
      },
      unmount: ({ app }) => () => {
        if (app.stage) {
          //app.stage.destroy(true)
        }
      }
    }
  }),
  lifecycle({
    componentDidMount() {
    },
    componentWillUnmount()  {
      this.props.unmount()
    }
  }),
)

const Stage = enhance(({
  app,
  canvasSet,
  children,
  layers, layerCreate, layerRemove,
  textures, textureLoad,
  width, height,
  isShow,
}) => {
  return (
    <React.Fragment>
      <canvas
        ref={canvasSet}
        style={{
          display: isShow ? `inline-block` : `none`,
          width,
          height,
        }}
      />
      <Context.Provider value={{
        app,
        layers, layerCreate, layerRemove,
        textures, textureLoad,
      }}>
        {app ? children : null}
      </Context.Provider>
    </React.Fragment>
  )
})

export default Stage