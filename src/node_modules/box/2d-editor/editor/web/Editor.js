import React, { Component } from 'react'
import compose              from 'recompose/compose'
import defaultProps         from 'recompose/defaultProps'
import withHandlers         from 'recompose/withHandlers'
import withPropsOnChange    from 'recompose/withPropsOnChange'
import withStateHandlers    from 'recompose/withStateHandlers'

import styled               from 'styled-components'

import * as THREE           from 'three'


import Image2d              from 'box/2d/image/web/Image2d'
import Layer2d              from 'box/2d/layer/web/Layer2d'
import Line2d               from 'box/2d/line/web/Line2d'
import Point2d              from 'box/2d/point/web/Point2d'
import Plane2d              from 'box/2d/plane/web/Plane2d'
import Stage                from 'box/2d/stage/web/Stage'

import Camera3d             from 'box/3d/camera/web/Camera3d'
import controlTypeMap       from 'box/3d/control/api/controlTypeMap'
import Grid3d               from 'box/3d/grid/web/Grid3d'
import LightAmbient3d       from 'box/3d/lightAmbient/web/LightAmbient3d'
import LightPoint3d         from 'box/3d/lightPoint/web/LightPoint3d'
import Line3d               from 'box/3d/line/web/Line3d'
import Object3d             from 'box/3d/object3d/web/Object3d'
import Pixi3d               from 'box/3d/pixi/web/Pixi3d'
import Plane3d              from 'box/3d/plane/web/Plane3d'
import Point3d              from 'box/3d/point/web/Point3d'
import Scene                from 'box/3d/scene/web/Scene'
import Sphere3d             from 'box/3d/sphere/web/Sphere3d'
import Video3d              from 'box/3d/video/web/Video3d'

import statusMap            from '../api/statusMap'


const Root = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
`

const enhance = compose(
  defaultProps({
    controlType: controlTypeMap.ORBITAL,
    state: statusMap.DEFAULT,
  }),
  withStateHandlers(
    () => ({
      planeInstance: null,
      canvasTexture1: null,
      width: 2048,
      height: 2048,
      intersection: {
        point: [0, 0, 0],
        uv: [0, 0],
      },
      path: [],
      path2: [],
      path3: [],
      point2: new THREE.Vector2(0, 0),
      point3: new THREE.Vector3(0, 0, 0),
      pointSize: 0.2,
      pointSizeModifier: 0.6,
      zoom: 1,
    }),
    {
      canvasTexture1Set: () => (canvasTexture1) => ({ canvasTexture1 }),
      pathAdd: ({ path }) => (point) => ({ path: [...path, point]}),
      pathClear: () => () => ({ path: [] }),
      path2Add: ({ path2 }) => (point2) => ({ path2: [...path2, point2]}),
      path2Clear: () => () => ({ path2: [] }),
      path3Add: ({ path3 }) => (point3) => ({ path3: [...path3, point3]}),
      path3Clear: () => () => ({ path3: [] }),
      planeInstanceSet: () => (planeInstance) => ({ planeInstance }),
      point2Set: () => (point2) => ({ point2 }),
      point3Set: () => (point3) => ({ point3 }),
      zoomSet: () => (zoom) => ({ zoom }),
    }
  ),
  withPropsOnChange(
    ['status'],
    ({ path2Clear, path3Clear, status }) => {
      path2Clear()
      path3Clear()
    }
  ),
  withPropsOnChange(
    ['point3', `path3`],
    ({ point3, path3 }) => {
      return {
        distancePoint3ToPath3: path3.length ? point3.distanceTo(path3[0]) : null
      }
    }
  ),
  withHandlers({
    onMouseClick: ({ path2Add, path3Add, status, point2, point3 }) => (e) => {
      if (status === statusMap.AREA_CREATE) {
        path2Add(point2)
        path3Add(point3)
      }
    },
  }),
)

const imageList = [
  `https://cdn.evokeme.io/static/texture/wood1.jpg`,
  `https://cdn.evokeme.io/static/texture/wood5.jpg`,
  `https://cdn.evokeme.io/static/texture/wood6.jpg`,
]

const Editor = enhance(({
  canvasTexture1, canvasTexture1Set,
  children,
  controlType,
  distancePoint3ToPath3,
  planeInstance, planeInstanceSet,
  path,
  path3,
  pointSize,
  pointSizeModifier,
  point2Set,
  point3, point3Set,
  status,
  textureIndex,
  width, height,
  onMouseClick,
  zoom, zoomSet,
}) => {
  const pathPerspective = [
    [0.05903514505697608,0.5569543648263005],
    [0.3783247660529034,0.5465990257669733],
    [0.3835024355825671,0.7519799171102994],
    [0.0555833653705335,0.6915737725975566],
  ].map((point) => ([point[0] * width, point[1] * height]))

  const intersectCheckList = planeInstance ? [planeInstance] : []

  const colorClosePath = distancePoint3ToPath3 && distancePoint3ToPath3 < 0.2 ? 0x1111ee : 0xffffff

  return (
    <Root>
      {children}
      <Scene onMouseClick={onMouseClick}>
        <Camera3d
          controlType={controlType}
          intersectCheckList={intersectCheckList}
          plane={planeInstance}
          onIntersect={({ uv, point }) => {
            point2Set(uv)
            point3Set(point)
          }}
          onZoom={zoomSet}
        />
        <LightAmbient3d />
        <LightPoint3d />
        <Object3d
          imageLink={imageList[textureIndex]}
          obj='https://cdn.evokeme.io/static/3d/table1.obj'
          position={new THREE.Vector3(0, -20, 5)}
          rotation={new THREE.Vector3(-Math.PI / 2, 0, 0)}
          scale={new THREE.Vector3(0.01, 0.01, 0.01)}
        />     
        {status === statusMap.AREA_CREATE && path3.length ? (
          <Line3d
            color={0xffffff}
            lineWidth={0.003 + 0.001 * zoom}
            path={path3}
          />
        ) : null}
        {status === statusMap.AREA_CREATE ? (
          <Point3d
            color={colorClosePath}
            position={point3.clone().setZ(0.2)}
            src='https://cdn.evokeme.io/static/3d/disc2.png'
            height={pointSize + pointSizeModifier * zoom}
            width={pointSize + pointSizeModifier * zoom}
          />
        ) : null}
        {path3.map((p3, index) => (
          <Point3d
            key={index}
            position={p3.clone().setZ(0.2)}
            src='https://cdn.evokeme.io/static/3d/disc2.png'
            height={pointSize + pointSizeModifier * zoom}
            width={pointSize + pointSizeModifier * zoom}
          />
        ))}
        <Pixi3d onInstanceChange={planeInstanceSet}>
          <Layer2d name='background' index={0}>
            <Image2d
              imageLink='https://i.imgur.com/OynwAM5.jpg'
              isFit
            />
          </Layer2d>
          <Layer2d name='textures' index={5}>
            <Plane2d
              imageLink='https://i.imgur.com/EK3XuH4.jpg'
              pathPerspective={pathPerspective}
            />
          </Layer2d>
        </Pixi3d>
      </Scene>
    </Root>
  )
})

export default Editor


